"Final" is a non-access modifier
"abstract" is a non-access modifier in class

"sealed" classes restrict which other classes may extend them.
Every permitted subclass must already exist and must explicitly extend the sealed class.
Every permitted subclass is required to declare itself as sealed, non-sealed or final.
    (eg) making Shape-class sealed to rectangle and circle only
        public sealed class Shape Permits Rectangle,Circle{}
        public class Circle extends Shape{}
        public sealed class Rectangle extends Shape permits Square{}
        public class Square extends Rectangle{}

similarly "non-sealed" classes does opposite of "sealed" class
    (eg) public non-sealed class Circle extends Shape{}

"final" classes cannot havev any sub-classes.
    (eg) public final class Square extends Rectangle{}

wrapper class
records
variableargs

Principles of OOPS:
    Encapsulation
    Inheritance
    Polymorphism
    Abstraction

override:
    Same signature but change the body of the method
overload:
    Same name but change the signature of the method

A child class can only inherit from one parent class

Access limitation in Inheriance:
    Constructors are not technically members of a class and are therefore not inherited
    All public and protected methods and feilds in a superclass are inherited by its subclass
    "Final" methods are inherited but cannot be overridden

Polymorphism = "The ability to take multiple forms"
    An object can have a superclass type and a subclass instance
    If a method is overridden by the subclass, the polymorphic object will execute the overridden method at runtime

Object Type Casting
    The act of converting an object's type into a different type

"instanceof" operator:
    An operator that checks if an object is an instance of a specific class
    (eg)
        Animal sasha = new Dog();
        //true
        boolean isDog = sasha instanceof Animal;
        //true
        boolean isAnimal = sasha instanceof Dog;
        //false
        boolean isCat = sasha instanceof Cat;
    ---Pattern match---:
        It check for the instance and store it in a variable
        (eg)
            if(sasha instance Dog sashaTheDog){
                sashaTheDog.fetch();
            }
            //equivalent to
            if(sasha instanceof Dog){
                Dog sashaTheDog = (Dog)sasha;
                sashaTheDog.fetch();
            }

Abstraction:
    Structures that represent abstract ideas
    An abstract class is not designed to be instantiated
    It is designed to be extened thus pushing the burde of implementation onto the subclass
    An abstract has no body only the signature of method is defined
    It is designed to be overwritten by a subclass
    Abstract classes are ment to be templates and not designed to be used as is
    Abstract classes and methods are templates that are meant to be implemented by their subclasses
    If a class contains one or more abstract methods. the class must be also abstract
    (eg)
        public abstract class Shape{
            abstract double calculateArea();
        }